name: Create a Briefcase Project
description: Creates a new Briefcase project using a particular GUI toolkit and template.

inputs:
  framework:
    description: "The GUI toolkit to use to create the project."
    default: "Toga"
  briefcase-template-source:
    description: "The template to use to roll out the project."
    required: false
  briefcase-template-branch:
    description: "The git branch for the template to use to roll out the project."
    required: false
  enable-automation:
    description: "Whether to create a project using the Briefcase Automation plugin."
    default: "false"  # all composite workflow inputs are of type string
  testing-pr-body:
    description: "Override value for body of PR; only for testing."
    required: false

outputs:
  project-path:
    value: ${{ steps.create.outputs.path }}
    description: "The file path to the root of the created project."

runs:
  using: composite
  steps:
    - name: Briefcase Template Override
      id: template-override
      env:
        GITHUB_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        # Check Body of PR for template to use
        # (only PRs will have a value for github.event.pull_request.number)
        PR_BODY="${{ inputs.testing-pr-body }}"
        if [[ -z "${PR_BODY}" && -n "${{ github.event.pull_request.number }}" ]]; then
          PR_BODY=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} --jq '.body')
        fi
        printf "::group::Retrieved PR Body\n%s\n::endgroup::\n" "${PR_BODY}"

        TEMPLATE_REPO=$(printf "%s" "${PR_BODY}" | perl -wlne '/BRIEFCASE[-_]*TEMPLATE[-_]*REPO:\s*\K\S+/i and print $&')
        TEMPLATE_REF=$(printf "%s" "${PR_BODY}" | perl -wlne '/BRIEFCASE[-_]*TEMPLATE[-_]*REF:\s*\K\S+/i and print $&')

        # If a template is not in the PR, use inputs specified in CI workflow
        if [ -z "${TEMPLATE_REPO}" ]; then
          TEMPLATE_REPO="${{ inputs.briefcase-template-source }}"
        fi
        if [ -z "${TEMPLATE_REF}" ]; then
          TEMPLATE_REF="${{ inputs.briefcase-template-branch }}"
        fi

        # Expose template repo and branch via outputs
        echo "repo=${TEMPLATE_REPO}" | tee -a ${GITHUB_OUTPUT}
        echo "ref=${TEMPLATE_REF}" | tee -a ${GITHUB_OUTPUT}

    - name: Create Briefcase Project
      id: create
      shell: bash
      run: |
        if [[ "${{ steps.template-override.outputs.repo }}" != "" ]]; then
          TEMPLATE=$(printf -- "--template %q" "${{ steps.template-override.outputs.repo }}")
        fi
        if [[ "${{ steps.template-override.outputs.ref }}" != "" ]]; then
          TEMPLATE_BRANCH=$(printf -- "--template-branch %q" "${{ steps.template-override.outputs.ref }}")
        fi

        # Map GUI toolkit through case insensitivity
        case "$(tr '[:upper:]' '[:lower:]' <<< "${{ inputs.framework }}")" in
          toga    ) BOOTSTRAP=Toga ;;
          pyside6 ) BOOTSTRAP=PySide6 ;;
          pygame  ) BOOTSTRAP=Pygame ;;
          *       ) BOOTSTRAP=${{ inputs.framework }} ;;
        esac

        # If enabled, use the Automation bootstrap
        [ "${{ inputs.enable-automation }}" != "false" ] && BOOTSTRAP="${BOOTSTRAP} Automation"

        ROOT_DIR="apps"
        APP_NAME="Verify App"
        APP_DIR="verifyapp"
        APP_PATH="${ROOT_DIR}/${APP_DIR}"

        # Prepare to create the project in APP_DIR
        mkdir -p "${ROOT_DIR}"
        cd "${ROOT_DIR}"
        rm -rf "${APP_DIR}"

        # Roll out the project
        briefcase new --no-input ${TEMPLATE} ${TEMPLATE_BRANCH} \
          -Q "formal_name=${APP_NAME}" \
          -Q "app_name=${APP_DIR}" \
          -Q "bootstrap=${BOOTSTRAP}"

        echo "Rolled out project to ${APP_PATH}"
        echo " > GUI Toolkit: ${{ inputs.framework }}"
        echo " > Bootstrap: ${BOOTSTRAP}"
        printf "::group::pyproject.toml\n%s\n::endgroup::\n" "$(cat "${APP_DIR}/pyproject.toml")"
        printf "::group::app.py\n%s\n::endgroup::\n" "$(cat "${APP_DIR}/src/${APP_DIR}/app.py")"
        echo "path=${APP_PATH}" >> ${GITHUB_OUTPUT}
