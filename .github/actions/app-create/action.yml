name: Create a Briefcase Project
description: Creates a new Briefcase project using a particular GUI toolkit and template.

inputs:
  framework:
    description: "The GUI toolkit to use to create the project."
    default: "Toga"
  briefcase-template-source:
    description: "The template to use to roll out the project."
    required: false
  briefcase-template-branch:
    description: "The git branch for the template to use to roll out the project."
    required: false
  enable-automation:
    description: "Whether to create a project using the Briefcase Automation plugin."
    default: "false"  # all composite workflow inputs are of type string
  testing-pr-body:
    description: "Override value for body of PR; only for testing."
    required: false

outputs:
  project-path:
    value: ${{ steps.create.outputs.path }}
    description: "The file path to the root of the created project."
  briefcase-template-repo:
    value: ${{ steps.template.outputs.repo }}
    description: "Template repo used to create app."
  briefcase-template-ref:
    value: ${{ steps.template.outputs.ref }}
    description: "Template ref used to create app."


runs:
  using: composite
  steps:
    - name: Checkout beeware/.github
      uses: actions/checkout@v4.1.7
      with:
        path: beeware-app-create-.github

    - name: Check for Briefcase Template Repo Override
      id: template-repo-override
      uses: ./beeware-app-create-.github/.github/actions/pr-body-parse
      with:
        key-regex: 'BRIEFCASE[-_]*TEMPLATE[-_]*REPO'
        testing-pr-body: ${{ inputs.testing-pr-body }}

    - name: Check for Briefcase Template Ref Override
      id: template-ref-override
      uses: ./beeware-app-create-.github/.github/actions/pr-body-parse
      with:
        key-regex: 'BRIEFCASE[-_]*TEMPLATE[-_]*REF'
        testing-pr-body: ${{ inputs.testing-pr-body }}

    - name: Declare Briefcase Template
      id: template
      shell: bash
      run: |
        REPO="${{ steps.template-repo-override.outputs.value || inputs.briefcase-template-source }}"
        REF="${{ steps.template-ref-override.outputs.value || inputs.briefcase-template-branch }}"

        if [ -n "${REPO}" ]; then
          printf -- "repo=%q\n" "${REPO}" | tee -a ${GITHUB_OUTPUT}
          printf -- "repo-cmdline=--template '%q'\n" "${REPO}" | tee -a ${GITHUB_OUTPUT}
        fi
        if [ -n "${REF}" ]; then
          printf -- "ref=%q\n" "${REF}" | tee -a ${GITHUB_OUTPUT}
          printf -- "ref-cmdline=--template-branch '%q'\n" "${REF}" | tee -a ${GITHUB_OUTPUT}
        fi

    - name: Create Briefcase Project
      id: create
      shell: bash
      run: |
        # Map GUI toolkit through case insensitivity
        case "$(tr '[:upper:]' '[:lower:]' <<< "${{ inputs.framework }}")" in
          toga    ) BOOTSTRAP=Toga ;;
          pyside6 ) BOOTSTRAP=PySide6 ;;
          pygame  ) BOOTSTRAP=Pygame ;;
          console ) BOOTSTRAP=Console ;;
          *       ) BOOTSTRAP=${{ inputs.framework }} ;;
        esac

        # If enabled, use the Automation bootstrap
        [ "${{ inputs.enable-automation }}" != "false" ] && BOOTSTRAP="${BOOTSTRAP} Automation"

        ROOT_DIR="apps"
        APP_NAME="Verify App"
        APP_DIR="verifyapp"
        APP_PATH="${ROOT_DIR}/${APP_DIR}"

        # Prepare to create the project in APP_DIR
        mkdir -p "${ROOT_DIR}"
        cd "${ROOT_DIR}"
        rm -rf "${APP_DIR}"

        # Roll out the project
        briefcase new --no-input \
          ${{ steps.template.outputs.repo-cmdline }} \
          ${{ steps.template.outputs.ref-cmdline }} \
          -Q "formal_name=${APP_NAME}" \
          -Q "app_name=${APP_DIR}" \
          -Q "bootstrap=${BOOTSTRAP}"

        echo "Rolled out project to ${APP_PATH}"
        echo " > GUI Toolkit: ${{ inputs.framework }}"
        echo " > Bootstrap: ${BOOTSTRAP}"
        printf "::group::pyproject.toml\n%s\n::endgroup::\n" "$(cat "${APP_DIR}/pyproject.toml")"
        printf "::group::app.py\n%s\n::endgroup::\n" "$(cat "${APP_DIR}/src/${APP_DIR}/app.py")"
        echo "path=${APP_PATH}" >> ${GITHUB_OUTPUT}
